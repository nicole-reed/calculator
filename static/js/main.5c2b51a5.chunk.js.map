{"version":3,"sources":["App.js","Button.js","Buttons.js","serviceWorker.js","index.js"],"names":["App","useState","result","setResult","input","setInput","clearResult","evaluateInput","evaluatedInput","eval","error","addToInput","value","console","log","operators","length","match","numStrings","split","lastNum","indexOf","lastChar","isNaN","parseInt","newInput","slice","lastCharDeleted","className","id","Button","props","onClick","Buttons","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5c2b51a5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Buttons from './Buttons'\nimport './App.css';\n\nfunction App() {\n\n  const [result, setResult] = useState('0');\n  const [input, setInput] = useState('');\n\n  const clearResult = () => {\n    setResult('0')\n    setInput('')\n  }\n\n  const evaluateInput = () => {\n    try {\n      const evaluatedInput = eval(input)\n      setResult(evaluatedInput)\n\n    } catch (error) {\n      setResult('error')\n    }\n\n    setInput('')\n  }\n\n\n  const addToInput = (value) => {\n    console.log(value)\n    const operators = /[\\/\\*\\+\\-]/g;\n    // if theres no num yet, the input becomes the value (which allows the prev result to be further operated on)\n    if (input.length === 0 && value.match(operators)) {\n      return setInput(result + value)\n    }\n\n    // split input into strings by operators\n    const numStrings = input.split(operators);\n    const lastNum = numStrings[numStrings.length - 1];\n    console.log(numStrings)\n    console.log(lastNum)\n    // if the latest number doesnt already contain a decimal, allow the value to be a decimal\n    if (lastNum.indexOf('.') !== -1 && value === '.') {\n      return\n    }\n\n    const lastChar = input[input.length - 1]\n    // if the last character is an operator and the value is an operator, only use the most recent operator unless its the negative symbol or decimal\n    if (isNaN(parseInt(lastChar)) && isNaN(parseInt(value)) && value !== '-' && value !== '.') {\n      const newInput = input.slice(0, -1) + value;\n      return setInput(newInput)\n    }\n\n    // if the input is already 0 and the value is a number besides 0, set the input as the next number\n    if (input.length === 1 && input[0] === '0' && !isNaN(parseInt(value))) {\n      return setInput(value)\n    }\n\n    if (value === '←') {\n      const lastCharDeleted = input.slice(0, -1);\n      return setInput(lastCharDeleted)\n    }\n\n    return setInput(input + value)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Calculation Station</h1>\n      <div className=\"calculator\">\n\n        <Buttons addToInput={addToInput} clearResult={clearResult} evaluateInput={evaluateInput} />\n\n        <p id=\"input\"> {input}</p>\n        <p id=\"display\">{result}</p>\n\n\n\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\n\r\nfunction Button(props) {\r\n\r\n  const handleClick = () => {\r\n    if (props.value === 'C') {\r\n      props.clearResult()\r\n    } else if (props.value === '=') {\r\n      props.evaluateInput()\r\n    } else {\r\n      props.addToInput(props.value)\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <button id={props.id} className={props.className} onClick={handleClick}>{props.value}</button>\r\n  )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from './Button';\r\nimport './App.css';\r\n\r\nconst Buttons = (props) => {\r\n\r\n\r\n  return (\r\n    <div id=\"buttons\" className=\"gridContainer\">\r\n\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"one\" value='1' input />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"two\" value='2' />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"three\" value='3' />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"add\" value='+' />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"four\" value='4' />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"five\" value='5' />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"six\" value='6' />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"subtract\" value='-' />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"seven\" value='7' />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"eight\" value='8' />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"nine\" value='9' />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"multiply\" value='*' />\r\n      <Button clearResult={props.clearResult} className=\"gridItem\" id=\"clear\" value='C' />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"zero\" value='0' />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"decimal\" value='.' />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"divide\" value='/' />\r\n\r\n      <Button evaluateInput={props.evaluateInput} className=\"gridItem\" id=\"equals\" value='=' />\r\n      <Button addToInput={props.addToInput} className=\"gridItem\" id=\"delete\" value='←' />\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Buttons;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}